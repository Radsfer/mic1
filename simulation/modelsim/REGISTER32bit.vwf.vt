// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/19/2024 07:30:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BANK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BANK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg CLOCK;
reg CPP_WRITE_EN;
reg D;
reg H_WRITE_EN;
reg [31:0] IN_C;
reg LOAD;
reg LV_WRITE_EN;
reg MAR_WRITE_EN;
reg [7:0] MBR_IN;
reg MBR_WRITE_EN;
reg [31:0] MDR_IN;
reg MDR_OUT_MEM;
reg MDR_WR_C;
reg MDR_WR_MEM;
reg OPC_WRITE_EN;
reg PC_WRITE_EN;
reg SP_WRITE_EN;
reg TOS_WRITE_EN;
// wires                                               
wire [31:0] MAR_OUT;
wire [7:0] MBR_OUT;
wire [31:0] MDR_OUT;
wire [31:0] OUT_A;
wire [31:0] OUT_B;
wire [31:0] PC_OUT;

// assign statements (if any)                          
BANK i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CLOCK(CLOCK),
	.CPP_WRITE_EN(CPP_WRITE_EN),
	.D(D),
	.H_WRITE_EN(H_WRITE_EN),
	.IN_C(IN_C),
	.LOAD(LOAD),
	.LV_WRITE_EN(LV_WRITE_EN),
	.MAR_OUT(MAR_OUT),
	.MAR_WRITE_EN(MAR_WRITE_EN),
	.MBR_IN(MBR_IN),
	.MBR_OUT(MBR_OUT),
	.MBR_WRITE_EN(MBR_WRITE_EN),
	.MDR_IN(MDR_IN),
	.MDR_OUT(MDR_OUT),
	.MDR_OUT_MEM(MDR_OUT_MEM),
	.MDR_WR_C(MDR_WR_C),
	.MDR_WR_MEM(MDR_WR_MEM),
	.OPC_WRITE_EN(OPC_WRITE_EN),
	.OUT_A(OUT_A),
	.OUT_B(OUT_B),
	.PC_OUT(PC_OUT),
	.PC_WRITE_EN(PC_WRITE_EN),
	.SP_WRITE_EN(SP_WRITE_EN),
	.TOS_WRITE_EN(TOS_WRITE_EN)
);
initial 
begin 
#500000 $finish;
end 

// CLOCK
initial
begin
	CLOCK = 1'b0;
	CLOCK = #60000 1'b1;
	CLOCK = #20000 1'b0;
	CLOCK = #70000 1'b1;
	CLOCK = #20000 1'b0;
	CLOCK = #120000 1'b1;
	CLOCK = #20000 1'b0;
	CLOCK = #50000 1'b1;
	CLOCK = #20000 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #20000 1'b0;
	LOAD = #210000 1'b1;
	LOAD = #20000 1'b0;
end 
// IN_C[ 31 ]
initial
begin
	IN_C[31] = 1'b1;
end 
// IN_C[ 30 ]
initial
begin
	IN_C[30] = 1'b0;
end 
// IN_C[ 29 ]
initial
begin
	IN_C[29] = 1'b1;
end 
// IN_C[ 28 ]
initial
begin
	IN_C[28] = 1'b0;
end 
// IN_C[ 27 ]
initial
begin
	IN_C[27] = 1'b0;
end 
// IN_C[ 26 ]
initial
begin
	IN_C[26] = 1'b1;
end 
// IN_C[ 25 ]
initial
begin
	IN_C[25] = 1'b0;
end 
// IN_C[ 24 ]
initial
begin
	IN_C[24] = 1'b1;
end 
// IN_C[ 23 ]
initial
begin
	IN_C[23] = 1'b1;
end 
// IN_C[ 22 ]
initial
begin
	IN_C[22] = 1'b0;
end 
// IN_C[ 21 ]
initial
begin
	IN_C[21] = 1'b1;
end 
// IN_C[ 20 ]
initial
begin
	IN_C[20] = 1'b0;
end 
// IN_C[ 19 ]
initial
begin
	IN_C[19] = 1'b0;
end 
// IN_C[ 18 ]
initial
begin
	IN_C[18] = 1'b1;
end 
// IN_C[ 17 ]
initial
begin
	IN_C[17] = 1'b0;
end 
// IN_C[ 16 ]
initial
begin
	IN_C[16] = 1'b1;
end 
// IN_C[ 15 ]
initial
begin
	IN_C[15] = 1'b1;
end 
// IN_C[ 14 ]
initial
begin
	IN_C[14] = 1'b0;
end 
// IN_C[ 13 ]
initial
begin
	IN_C[13] = 1'b1;
end 
// IN_C[ 12 ]
initial
begin
	IN_C[12] = 1'b0;
end 
// IN_C[ 11 ]
initial
begin
	IN_C[11] = 1'b0;
end 
// IN_C[ 10 ]
initial
begin
	IN_C[10] = 1'b1;
end 
// IN_C[ 9 ]
initial
begin
	IN_C[9] = 1'b0;
end 
// IN_C[ 8 ]
initial
begin
	IN_C[8] = 1'b1;
end 
// IN_C[ 7 ]
initial
begin
	IN_C[7] = 1'b1;
end 
// IN_C[ 6 ]
initial
begin
	IN_C[6] = 1'b0;
end 
// IN_C[ 5 ]
initial
begin
	IN_C[5] = 1'b1;
end 
// IN_C[ 4 ]
initial
begin
	IN_C[4] = 1'b0;
end 
// IN_C[ 3 ]
initial
begin
	IN_C[3] = 1'b0;
end 
// IN_C[ 2 ]
initial
begin
	IN_C[2] = 1'b1;
end 
// IN_C[ 1 ]
initial
begin
	IN_C[1] = 1'b0;
end 
// IN_C[ 0 ]
initial
begin
	IN_C[0] = 1'b1;
end 
initial 
begin 
#500000 $finish;
end 
endmodule

